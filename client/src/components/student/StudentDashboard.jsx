// client/src/components/student/StudentDashboard.jsx
import { useContext, useEffect, useState, useCallback } from 'react';
import { Link } from 'react-router-dom';
import AuthContext from '../../contexts/AuthContext.jsx';
import CreditContext from '../../contexts/CreditContext.jsx';
import * as studentService from '../../services/studentService.js';
import * as eventService from '../../services/eventService.js';
import Path from '../../paths.js';

export default function StudentDashboard() {
    const { userId, firstName, lastName, isAuthenticated } = useContext(AuthContext);
    const { credits, getCompletedCredits, getStudentGradeLevel } = useContext(CreditContext);
    const [student, setStudent] = useState(null);
    const [upcomingEvents, setUpcomingEvents] = useState([]);
    const [recentAchievements, setRecentAchievements] = useState([]);
    const [loading, setLoading] = useState(true);

    const fetchDashboardData = useCallback(async () => {
        if (!isAuthenticated || !userId) return;

        try {
            setLoading(true);

            // –ü–∞—Ä–∞–ª–µ–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
            const [profileData, eventsData, achievementsData] = await Promise.all([
                studentService.getStudentProfile(userId).catch(() => null),
                eventService.getAllEvents().catch(() => []),
                studentService.getStudentAchievements(userId).catch(() => [])
            ]);

            // –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –ø—Ä–æ—Ñ–∏–ª–∞
            if (profileData && profileData.id) {
                setStudent(profileData);
            } else {
                // –ê–∫–æ –Ω—è–º–∞ –ø—Ä–æ—Ñ–∏–ª, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –±–∞–∑–æ–≤–∏ –¥–∞–Ω–Ω–∏ –æ—Ç AuthContext
                setStudent({
                    firstName: firstName || '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
                    lastName: lastName || '',
                    studentInfo: {
                        grade: 'N/A',
                        specialization: 'N/A',
                        averageGrade: null
                    }
                });
            }

            // –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏ —Å—ä–±–∏—Ç–∏—è (—Å–ª–µ–¥–≤–∞—â–∏—Ç–µ 3)
            const upcoming = (eventsData || [])
                .filter(event => new Date(event.startDate) > new Date())
                .sort((a, b) => new Date(a.startDate) - new Date(b.startDate))
                .slice(0, 3);
            setUpcomingEvents(upcoming);

            // –ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3 –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const recent = (achievementsData || [])
                .sort((a, b) => new Date(b.date) - new Date(a.date))
                .slice(0, 3);
            setRecentAchievements(recent);

            setLoading(false);
        } catch (err) {
            console.error('Error fetching dashboard data:', err);
            setLoading(false);
        }
    }, [isAuthenticated, userId, firstName, lastName]);

    useEffect(() => {
        fetchDashboardData();
    }, [fetchDashboardData]);

    if (loading) {
        return (
            <div className="loading">
                <div className="loading-spinner"></div>
                <p>–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–æ—Ç–æ...</p>
            </div>
        );
    }

    const gradeLevel = getStudentGradeLevel();
    const completedCredits = getCompletedCredits();
    const pendingCredits = credits.filter(c => c.status === 'pending').length;

    // –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    const studentInfo = student?.studentInfo || {};
    const grade = studentInfo.grade || 'N/A';
    const specialization = studentInfo.specialization || 'N/A';
    const averageGrade = studentInfo.averageGrade || '-';
    const displayFirstName = student?.firstName || firstName || '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª';
    const displayLastName = student?.lastName || lastName || '';

    return (
        <section className="student-dashboard">
            <div className="dashboard-header">
                <h1>–î–æ–±—Ä–µ –¥–æ—à–ª–∏, {displayFirstName} {displayLastName}!</h1>
                <p className="dashboard-subtitle">
                    {grade !== 'N/A' ? `${grade} –∫–ª–∞—Å` : ''}
                    {grade !== 'N/A' && specialization !== 'N/A' ? ' ‚Ä¢ ' : ''}
                    {specialization !== 'N/A' ? specialization : ''}
                </p>
            </div>

            {/* –ë—ä—Ä–∑ –ø—Ä–µ–≥–ª–µ–¥ */}
            <div className="quick-stats">
                <div className="stat-card">
                    <div className="stat-value">{averageGrade}</div>
                    <div className="stat-label">–°—Ä–µ–¥–µ–Ω —É—Å–ø–µ—Ö</div>
                </div>
                <div className="stat-card">
                    <div className="stat-value">{completedCredits}</div>
                    <div className="stat-label">–û–¥–æ–±—Ä–µ–Ω–∏ –∫—Ä–µ–¥–∏—Ç–∏</div>
                </div>
                <div className="stat-card">
                    <div className="stat-value">{pendingCredits}</div>
                    <div className="stat-label">–ß–∞–∫–∞—â–∏ –∫—Ä–µ–¥–∏—Ç–∏</div>
                </div>
                <div className="stat-card">
                    <div className={`stat-value rating-${gradeLevel.toLowerCase()}`}>
                        {gradeLevel}
                    </div>
                    <div className="stat-label">–†–µ–π—Ç–∏–Ω–≥</div>
                </div>
            </div>

            {/* –ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="quick-actions">
                <h2>–ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                <div className="actions-grid">
                    <Link to={Path.Credits} className="action-card">
                        <span className="action-icon">üìä</span>
                        <span className="action-title">–î–æ–±–∞–≤–∏ –∫—Ä–µ–¥–∏—Ç</span>
                    </Link>
                    <Link to={Path.Portfolio} className="action-card">
                        <span className="action-icon">üíº</span>
                        <span className="action-title">–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</span>
                    </Link>
                    <Link to={Path.Events} className="action-card">
                        <span className="action-icon">üìÖ</span>
                        <span className="action-title">–°—ä–±–∏—Ç–∏—è</span>
                    </Link>
                    <Link to={Path.Achievements} className="action-card">
                        <span className="action-icon">üèÜ</span>
                        <span className="action-title">–ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
                    </Link>
                </div>
            </div>

            <div className="dashboard-content">
                {/* –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏ —Å—ä–±–∏—Ç–∏—è */}
                <div className="dashboard-section">
                    <div className="section-header">
                        <h2>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏ —Å—ä–±–∏—Ç–∏—è</h2>
                        <Link to={Path.Events} className="see-all">–í–∏–∂ –≤—Å–∏—á–∫–∏ ‚Üí</Link>
                    </div>
                    {upcomingEvents.length === 0 ? (
                        <p className="no-data">–ù—è–º–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏ —Å—ä–±–∏—Ç–∏—è</p>
                    ) : (
                        <div className="events-list">
                            {upcomingEvents.map(event => (
                                <div key={event.id} className="mini-event-card">
                                    <div className="event-date">
                                        {new Date(event.startDate).toLocaleDateString('bg-BG', {
                                            day: 'numeric',
                                            month: 'short'
                                        })}
                                    </div>
                                    <div className="event-info">
                                        <h4>{event.title}</h4>
                                        <p>{event.location}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* –ü–æ—Å–ª–µ–¥–Ω–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
                <div className="dashboard-section">
                    <div className="section-header">
                        <h2>–ü–æ—Å–ª–µ–¥–Ω–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
                        <Link to={Path.Achievements} className="see-all">–í–∏–∂ –≤—Å–∏—á–∫–∏ ‚Üí</Link>
                    </div>
                    {recentAchievements.length === 0 ? (
                        <p className="no-data">–û—â–µ –Ω—è–º–∞—Ç–µ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è</p>
                    ) : (
                        <div className="achievements-list">
                            {recentAchievements.map(achievement => (
                                <div key={achievement.id} className="mini-achievement-card">
                                    <div className="achievement-icon">üèÖ</div>
                                    <div className="achievement-info">
                                        <h4>{achievement.title}</h4>
                                        <p>{achievement.category}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </section>
    );
}