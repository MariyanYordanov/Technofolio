// client/src/components/test/ApiTester.jsx
import { useState } from 'react';
import * as authService from '../../services/authService.js';
import * as studentService from '../../services/studentService.js';
import * as teacherService from '../../services/teacherService.js';
import * as creditService from '../../services/creditService.js';
import * as eventService from '../../services/eventService.js';

const TEST_ACCOUNTS = {
    admin: { email: 'admin@technofolio.bg', password: 'Admin123!' },
    teacher: { email: 'teacher1@technofolio.bg', password: 'Teacher123!' },
    student: { email: 'student1@technofolio.bg', password: 'Student123!' }
};

export default function ApiTester() {
    const [results, setResults] = useState([]);
    const [currentUser, setCurrentUser] = useState(null);
    const [testing, setTesting] = useState(false);

    const addResult = (type, title, details = null) => {
        setResults(prev => [...prev, { type, title, details, timestamp: new Date() }]);
    };

    const clearResults = () => {
        setResults([]);
    };

    // Test functions
    const testServerConnection = async () => {
        addResult('info', 'üîå –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞...');
        try {
            const response = await fetch('http://localhost:3030/');
            const data = await response.json();
            addResult('success', '‚úÖ –°—ä—Ä–≤—ä—Ä—ä—Ç —Ä–∞–±–æ—Ç–∏', data);
            return true;
        } catch (error) {
            addResult('error', '‚ùå –°—ä—Ä–≤—ä—Ä—ä—Ç –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è', { error: error.message });
            return false;
        }
    };

    const testLogin = async (accountType = 'student') => {
        addResult('info', `üîê –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ login —Å ${accountType} –∞–∫–∞—É–Ω—Ç...`);
        try {
            const credentials = TEST_ACCOUNTS[accountType];
            const result = await authService.login(credentials.email, credentials.password);
            setCurrentUser(result.user);
            addResult('success', `‚úÖ –£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥ –∫–∞—Ç–æ ${accountType}`, result.user);
            return true;
        } catch (error) {
            addResult('error', `‚ùå –ù–µ—É—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥ –∫–∞—Ç–æ ${accountType}`, { error: error.message });
            return false;
        }
    };

    const testGetProfile = async () => {
        addResult('info', 'üë§ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª...');
        try {
            const result = await authService.getMe();
            addResult('success', '‚úÖ –ü—Ä–æ—Ñ–∏–ª—ä—Ç –µ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ', result);
            return true;
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª', { error: error.message });
            return false;
        }
    };

    const testStudentEndpoints = async () => {
        if (!currentUser || currentUser.role !== 'student') {
            addResult('info', '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ');
            return;
        }

        addResult('info', 'üéì –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—Å–∫–∏ endpoints...');

        // Test student profile
        try {
            const profile = await studentService.getStudentProfile(currentUser._id);
            addResult('success', '‚úÖ –°—Ç—É–¥–µ–Ω—Ç—Å–∫–∏ –ø—Ä–æ—Ñ–∏–ª –ø–æ–ª—É—á–µ–Ω', profile);
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ñ–∏–ª', { error: error.message });
        }

        // Test credits
        try {
            const credits = await creditService.getStudentCredits(currentUser._id);
            addResult('success', '‚úÖ –ö—Ä–µ–¥–∏—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏', { count: credits.length });
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫—Ä–µ–¥–∏—Ç–∏', { error: error.message });
        }

        // Test achievements
        try {
            const achievements = await studentService.getStudentAchievements(currentUser._id);
            addResult('success', '‚úÖ –ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏', { count: achievements.length });
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è', { error: error.message });
        }

        // Test events
        try {
            const events = await eventService.getAllEvents();
            addResult('success', '‚úÖ –°—ä–±–∏—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–∏', { count: events.length });
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–±–∏—Ç–∏—è', { error: error.message });
        }
    };

    const testTeacherEndpoints = async () => {
        if (!currentUser || currentUser.role !== 'teacher') {
            addResult('info', '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ —É—á–∏—Ç–µ–ª—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ');
            return;
        }

        addResult('info', 'üë®‚Äçüè´ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ —É—á–∏—Ç–µ–ª—Å–∫–∏ endpoints...');

        // Test getting students
        try {
            const students = await teacherService.getAllStudents();
            addResult('success', '‚úÖ –°–ø–∏—Å—ä–∫ —Å —É—á–µ–Ω–∏—Ü–∏', { count: students.length });
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —É—á–µ–Ω–∏—Ü–∏', { error: error.message });
        }

        // Test pending credits
        try {
            const pending = await teacherService.getPendingCredits();
            addResult('success', '‚úÖ –ß–∞–∫–∞—â–∏ –∫—Ä–µ–¥–∏—Ç–∏', { count: pending.length });
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–∞–∫–∞—â–∏ –∫—Ä–µ–¥–∏—Ç–∏', { error: error.message });
        }

        // Test statistics
        try {
            const stats = await teacherService.getStudentsStatistics();
            addResult('success', '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏', stats);
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', { error: error.message });
        }
    };

    const testLogout = async () => {
        addResult('info', 'üö™ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ logout...');
        try {
            await authService.logout();
            setCurrentUser(null);
            addResult('success', '‚úÖ –£—Å–ø–µ—à–µ–Ω logout');
            return true;
        } catch (error) {
            addResult('error', '‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ logout', { error: error.message });
            return false;
        }
    };

    const runAllTests = async () => {
        setTesting(true);
        clearResults();
        addResult('info', 'üöÄ –ó–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ...');

        // Test server
        const serverOk = await testServerConnection();
        if (!serverOk) {
            addResult('error', '‚õî –°–ø–∏—Ä–∞–Ω–µ - —Å—ä—Ä–≤—ä—Ä—ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∏');
            setTesting(false);
            return;
        }

        // Test as student
        await testLogin('student');
        await testGetProfile();
        await testStudentEndpoints();
        await testLogout();

        // Test as teacher  
        await testLogin('teacher');
        await testGetProfile();
        await testTeacherEndpoints();
        await testLogout();

        // Test as admin
        await testLogin('admin');
        await testGetProfile();
        await testLogout();

        addResult('info', '‚ú® –¢–µ—Å—Ç–æ–≤–µ—Ç–µ –∑–∞–≤—ä—Ä—à–∏—Ö–∞!');
        setTesting(false);
    };

    return (
        <div className="api-tester">
            <h1>API –¢–µ—Å—Ç–µ—Ä</h1>

            <div className="controls">
                <button onClick={runAllTests} disabled={testing}>
                    {testing ? '–¢–µ—Å—Ç–≤–∞–Ω–µ...' : '–°—Ç–∞—Ä—Ç–∏—Ä–∞–π —Ç–µ—Å—Ç–æ–≤–µ'}
                </button>
                <button onClick={clearResults}>–ò–∑—á–∏—Å—Ç–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏</button>
            </div>

            <div className="results">
                {results.map((result, index) => (
                    <div key={index} className={`result ${result.type}`}>
                        <strong>{result.title}</strong>
                        {result.details && (
                            <pre>{JSON.stringify(result.details, null, 2)}</pre>
                        )}
                    </div>
                ))}
            </div>

            <style jsx>{`
                .api-tester {
                    padding: 20px;
                    max-width: 1200px;
                    margin: 0 auto;
                }
                .controls {
                    margin: 20px 0;
                    display: flex;
                    gap: 10px;
                }
                .controls button {
                    padding: 10px 20px;
                    background: #007bff;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                }
                .controls button:disabled {
                    background: #6c757d;
                    cursor: not-allowed;
                }
                .results {
                    max-height: 600px;
                    overflow-y: auto;
                    border: 1px solid #ddd;
                    padding: 10px;
                    border-radius: 4px;
                    background: #f8f9fa;
                }
                .result {
                    margin: 10px 0;
                    padding: 10px;
                    border-radius: 4px;
                }
                .result.success {
                    background: #d4edda;
                    color: #155724;
                    border: 1px solid #c3e6cb;
                }
                .result.error {
                    background: #f8d7da;
                    color: #721c24;
                    border: 1px solid #f5c6cb;
                }
                .result.info {
                    background: #d1ecf1;
                    color: #0c5460;
                    border: 1px solid #bee5eb;
                }
                pre {
                    background: white;
                    padding: 5px;
                    border-radius: 3px;
                    overflow-x: auto;
                    margin-top: 5px;
                }
            `}</style>
        </div>
    );
}