// server/utils/AppError.js
export class AppError extends Error {
    constructor(message, statusCode, errors = null) {
        super(message);
        this.statusCode = statusCode;
        this.isOperational = true;
        this.errors = errors;
        Error.captureStackTrace(this, this.constructor);
    }
}

export const handleError = (err, req, res, next) => {
    let error = { ...err };
    error.message = err.message;

    // MongoDB –≥—Ä–µ—à–∫–∏
    if (err.name === 'CastError') {
        const message = `–ù–µ–≤–∞–ª–∏–¥–µ–Ω ${err.path}: ${err.value}`;
        error = new AppError(message, 400);
    }

    // –î—É–±–ª–∏—Ä–∞–Ω –∫–ª—é—á
    if (err.code === 11000) {
        const message = `–î—É–±–ª–∏—Ä–∞–Ω –∫–ª—é—á: ${Object.keys(err.keyValue).join(', ')}`;
        error = new AppError(message, 400);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∏ –≥—Ä–µ—à–∫–∏
    if (err.name === 'ValidationError') {
        const message = Object.values(err.errors).map(val => val.message).join(', ');
        error = new AppError(message, 400);
    }

    // JWT –≥—Ä–µ—à–∫–∏
    if (err.name === 'JsonWebTokenError') {
        return res.status(401).json({
            status: 'error',
            message: '–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–æ–∫–µ–Ω. –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –æ—Ç–Ω–æ–≤–æ.'
        });
    }

    if (err.name === 'TokenExpiredError') {
        return res.status(401).json({
            status: 'error',
            message: '–¢–æ–∫–µ–Ω—ä—Ç –µ –∏–∑—Ç–µ–∫—ä–ª. –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –æ—Ç–Ω–æ–≤–æ.'
        });
    }

    // –ì—Ä–µ—à–∫–∞ –≤ production
    if (process.env.NODE_ENV === 'production') {
        if (error.isOperational) {
            return res.status(error.statusCode).json({
                status: 'error',
                message: error.message,
                errors: error.errors
            });
        }

        // Log –≥—Ä–µ—à–∫–∞—Ç–∞
        console.error('ERROR üí•', err);

        // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—á–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
        return res.status(500).json({
            status: 'error',
            message: '–ù–µ—â–æ —Å–µ –æ–±—ä—Ä–∫–∞!'
        });
    }

    // –ì—Ä–µ—à–∫–∞ –≤ development
    res.status(error.statusCode || 500).json({
        status: 'error',
        message: error.message,
        error: err,
        stack: err.stack
    });
};